<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tedu.zdsub.dao.NeedMapper">
  <resultMap id="BaseResultMap" type="cn.tedu.zdsub.pojo.Need">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="TITLE" jdbcType="VARCHAR" property="title" />
    <result column="READ_NUM" jdbcType="INTEGER" property="readNum" />
    <result column="SEND_TIME" jdbcType="VARCHAR" property="sendTime" />
    <result column="LEVEL" jdbcType="INTEGER" property="level" />
    <result column="SCH_ID" jdbcType="VARCHAR" property="schId" />
    <result column="CREATE_USER" jdbcType="VARCHAR" property="createUser" />
    <result column="UPDATE_TIME" jdbcType="VARCHAR" property="updateTime" />
    <result column="UPDATE_USER" jdbcType="VARCHAR" property="updateUser" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.tedu.zdsub.pojo.Need">
    <result column="CONTEXT" jdbcType="LONGVARCHAR" property="context" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, TITLE, READ_NUM, SEND_TIME, LEVEL, SCH_ID, CREATE_USER, UPDATE_TIME, UPDATE_USER
  </sql>
  <sql id="Blob_Column_List">
    CONTEXT
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from need
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from need
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="cn.tedu.zdsub.pojo.Need">
    insert into need (ID, TITLE, READ_NUM, 
      SEND_TIME, LEVEL, SCH_ID, 
      CREATE_USER, UPDATE_TIME, UPDATE_USER, 
      CONTEXT)
    values (#{id,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{readNum,jdbcType=INTEGER}, 
      #{sendTime,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{schId,jdbcType=VARCHAR}, 
      #{createUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=VARCHAR}, #{updateUser,jdbcType=VARCHAR}, 
      #{context,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.tedu.zdsub.pojo.Need">
    insert into need
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="title != null">
        TITLE,
      </if>
      <if test="readNum != null">
        READ_NUM,
      </if>
      <if test="sendTime != null">
        SEND_TIME,
      </if>
      <if test="level != null">
        LEVEL,
      </if>
      <if test="schId != null">
        SCH_ID,
      </if>
      <if test="createUser != null">
        CREATE_USER,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
      <if test="updateUser != null">
        UPDATE_USER,
      </if>
      <if test="context != null">
        CONTEXT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="readNum != null">
        #{readNum,jdbcType=INTEGER},
      </if>
      <if test="sendTime != null">
        #{sendTime,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="schId != null">
        #{schId,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="context != null">
        #{context,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.tedu.zdsub.pojo.Need">
    update need
    <set>
      <if test="title != null">
        TITLE = #{title,jdbcType=VARCHAR},
      </if>
      <if test="readNum != null">
        READ_NUM = #{readNum,jdbcType=INTEGER},
      </if>
      <if test="sendTime != null">
        SEND_TIME = #{sendTime,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        LEVEL = #{level,jdbcType=INTEGER},
      </if>
      <if test="schId != null">
        SCH_ID = #{schId,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null">
        CREATE_USER = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null">
        UPDATE_USER = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="context != null">
        CONTEXT = #{context,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.tedu.zdsub.pojo.Need">
    update need
    set TITLE = #{title,jdbcType=VARCHAR},
      READ_NUM = #{readNum,jdbcType=INTEGER},
      SEND_TIME = #{sendTime,jdbcType=VARCHAR},
      LEVEL = #{level,jdbcType=INTEGER},
      SCH_ID = #{schId,jdbcType=VARCHAR},
      CREATE_USER = #{createUser,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      UPDATE_USER = #{updateUser,jdbcType=VARCHAR},
      CONTEXT = #{context,jdbcType=LONGVARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.tedu.zdsub.pojo.Need">
    update need
    set TITLE = #{title,jdbcType=VARCHAR},
      READ_NUM = #{readNum,jdbcType=INTEGER},
      SEND_TIME = #{sendTime,jdbcType=VARCHAR},
      LEVEL = #{level,jdbcType=INTEGER},
      SCH_ID = #{schId,jdbcType=VARCHAR},
      CREATE_USER = #{createUser,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
      UPDATE_USER = #{updateUser,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  
  <select id="selectByPage" parameterType="cn.tedu.zdsub.pojo.Page" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from need
    limit #{start }, #{rows }
  </select>
  <select id="selelctCount" resultType="java.lang.Integer">
    select count(*) from need
  </select>
  <select id="selectByParam" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from need
    where TITLE LIKE #{param}
    limit #{page.start }, #{page.end }
  </select>
  <select id="selectParamCount" parameterType="java.lang.String" resultType="java.lang.Integer">
    select count(*) from need
    where TITLE LIKE #{param}
  </select>
</mapper>